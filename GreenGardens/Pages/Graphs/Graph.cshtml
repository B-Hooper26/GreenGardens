@page
@model GreenGardens.Pages.Graphs.GraphModel
@{
	ViewData["Title"] = "Price Graph";
}


<div>
	<h2>Stock Quantity and Expectancy for each item</h2>
	<canvas id="Quantitygraph"></canvas>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script >
		var ctx = document.getElementById('Quantitygraph').getContext('2d');
			var tasksData = @Html.Raw(Model.ProductJson);
			var tasksGraph = new Chart(ctx, {
			type: 'bar',
		data: {
				labels: tasksData.map(t => new String(t.Name).toString()),
			datasets: [{
				label: 'Quantity of stock',
				data: tasksData.map(t => t.Stock_Quantity),
					backgroundColor: 'rgba(7, 229, 7, 0.33)',
				borderColor: 'black',
				borderWidth: 1,
			},
				{
					label: 'Expected Stock',
					data: tasksData.map(t => t.Expected_Stock),
					backgroundColor: 'rgba(7, 0, 255, 0.33)',
					borderColor: 'black',
					borderWidth: 1,
				},

			]
		},
		options: {
			scales: {
				y: {
					beginAtZero: true
				}
			}
		}
	});
</script>
}
    <h2>Under stock products</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Description</th>
                <th>Stock Quantity</th>
                <th>Expected Stock</th>
                <th>Stock Level</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var product in Model.Products)//layout the table of products that are under stock
        {
            @if (product.Expected_Stock > @product.Stock_Quantity)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>£@product.Price</td>
                    <td>@product.Description</td>
                    <td>@product.Stock_Quantity</td>
                    <td>@product.Expected_Stock</td>
                    <td>Low Stock Levels</td>
                    <td>
                        <img src="@product.ImagePath" alt="Product Image" style="width:100px">
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<h2>Highest to Lowest</h2>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th>Description</th>
            <th>Stock Quantity</th>
            <th>Expected Stock</th>
            <th>Stock Level</th>
            <th>Image</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model.Products.OrderByDescending(l => l.Price).Take(5))
        {
            <tr>
                <td>@product.Name</td>
                <td>£@product.Price</td>
                <td>@product.Description</td>
                <td>@product.Stock_Quantity</td>
                <td>@product.Expected_Stock</td>
                <td>High Stock Levels</td>
                <td>
                    <img src="@product.ImagePath" alt="Product Image" style="width:100px">
                </td>
            </tr>
        }

    </tbody>
</table>

<h2>Lowest to highest </h2>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th>Description</th>
            <th>Stock Quantity</th>
            <th>Expected Stock</th>
            <th>Stock Level</th>
            <th>Image</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model.Products.OrderBy(l => l.Price).Take(5))
        {
            <tr>
                <td>@product.Name</td>
                <td>£@product.Price</td>
                <td>@product.Description</td>
                <td>@product.Stock_Quantity</td>
                <td>@product.Expected_Stock</td>
                <td>High Stock Levels</td>
                <td>
                    <img src="@product.ImagePath" alt="Product Image" style="width:100px">
                </td>
            </tr>
        }

    </tbody>
</table>

<h2>Over stock products</h2>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th>Description</th>
            <th>Stock Quantity</th>
            <th>Expected Stock</th>
            <th>Stock Level</th>
            <th>Image</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model.Products)//layout the table of products that are overstocked
        {
            @if (product.Expected_Stock < @product.Stock_Quantity)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>£@product.Price</td>
                    <td>@product.Description</td>
                    <td>@product.Stock_Quantity</td>
                    <td>@product.Expected_Stock</td>
                    <td>High Stock Levels</td>
                    <td>
                        <img src="@product.ImagePath" alt="Product Image" style="width:100px">
                    </td>
                </tr>
            }
        }




    </tbody>
</table>